"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[76],{2820:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"CyclOps-0.2.0-release","metadata":{"permalink":"/cyclops/blog/CyclOps-0.2.0-release","source":"@site/blog/2023-12-01-0.2.0-release.md","title":"CyclOps 0.2.0 release","description":"---","date":"2023-12-01T00:00:00.000Z","formattedDate":"December 1, 2023","tags":[{"label":"0.2.0","permalink":"/cyclops/blog/tags/0-2-0"}],"readingTime":3.035,"hasTruncateMarker":false,"authors":[{"name":"Carolyn Chong","title":"Senior Product Manager","url":"https://github.com/carolynchong","image_url":"https://github.com/carolynchong.png","imageURL":"https://github.com/carolynchong.png"},{"name":"Amrit Krishnan","title":"Technical Team Lead","url":"https://github.com/amrit110","image_url":"https://github.com/amrit110.png","imageURL":"https://github.com/amrit110.png"}],"frontMatter":{"slug":"CyclOps-0.2.0-release","title":"CyclOps 0.2.0 release","authors":[{"name":"Carolyn Chong","title":"Senior Product Manager","url":"https://github.com/carolynchong","image_url":"https://github.com/carolynchong.png","imageURL":"https://github.com/carolynchong.png"},{"name":"Amrit Krishnan","title":"Technical Team Lead","url":"https://github.com/amrit110","image_url":"https://github.com/amrit110.png","imageURL":"https://github.com/amrit110.png"}],"tags":["0.2.0"]},"unlisted":false},"content":"---\\n\\nWe\u2019re excited to share the release of our latest version of `CyclOps`, an open-source software toolkit to implement machine learning models for health care.\\nOur new version follows the release of [Vector Institute\'s AI Trust and Safety Principles](https://vectorinstitute.ai/ai-trust-and-safety-principles/), that are essential considerations to be taken into account when developing and deploying AI solutions.\\n\\nThe new version includes the following new features and improvements:\\n\\n### Model reports for evaluating and monitoring clinical ML models\\n\\nTailored for clinicians, data scientists and ML engineers, CyclOps now allows users to generate model reports using a report API. ML teams building clinical ML models can use the report API to build custom model reports for their use case. The report API supports interactive plots, tooltips, trend analysis, threshold limits, and timestamps so that you can monitor the performance of your model over time. The model report also includes a sidebar that displays your model\u2019s metadata so that your model\u2019s information is easily visible.\\n\\nWe believe that increased model transparency allows clinical ML teams to develop and deploy ML models in a safe and responsible manner.\\n\\nWe\u2019re excited to see radiology teams and patient safety teams at local hospitals use the model report to monitor their risk prediction and detection models so that they can make more informed decisions around patient care.\\n\\nCheck out an example model report [here](https://vectorinstitute.github.io/cyclops/api/tutorials/nihcxr/nihcxr_report_periodic.html) and a [tutorial](https://vectorinstitute.github.io/cyclops/api/tutorials/kaggle/heart_failure_prediction.html) showcasing the use of the report API!\\n\\n### An experimental evaluation metrics package that demonstrates cross-framework compatibility\\n\\nWe are introducing a new experimental metrics package which adopts the [array API standard](https://data-apis.org/array-api/latest/), and provides distributed computation support using [torch.distributed](https://pytorch.org/docs/stable/distributed.html) and [mpi4py](https://mpi4py.readthedocs.io/en/stable/) backends. The array API standard allows array-consuming libraries like CyclOps to support functionality across array types like [NumPy](https://numpy.org/), [CuPy](https://cupy.dev/) and [PyTorch](https://pytorch.org/).\\n\\nLet\'s see how the cross-framework compatibility works with an example. In this example we compute the confusion matrix using the function provided by [scikit-learn](https://scikit-learn.org/) against the one provided by CyclOps. The inputs are numpy arrays.\\n\\n```python\\nimport numpy as np\\nfrom sklearn.metrics import confusion_matrix\\nfrom cyclops.evaluate.metrics.experimental.functional.confusion_matrix import (\\n    binary_confusion_matrix,\\n)\\n\\n\\ny_true = np.random.randint(0, 2, size=10)\\ny_pred = np.random.rand(10)\\ny_pred_discrete = (y_pred > 0.5).astype(int)\\n\\nprint(\\"cyclops confusion matrix\\\\n\\", binary_confusion_matrix(y_true, y_pred_discrete))\\nprint(\\"scikit-learn confusion matrix\\\\n\\", confusion_matrix(y_true, y_pred_discrete))\\n```\\n\\nresults in\\n\\n```bash\\ncyclops confusion matrix\\n [[2 3]\\n [4 1]]\\nscikit-learn confusion matrix\\n [[2 3]\\n [4 1]]\\n```\\n\\nSimilarly, when the inputs are torch tensors, we compare with the function provided by the [torchmetrics](https://torchmetrics.readthedocs.io/en/stable/) library.\\n\\n```python\\nimport numpy as np\\nimport torch\\nfrom torchmetrics.functional.classification.confusion_matrix import (\\n   binary_confusion_matrix as torch_binary_confusion_matrix,\\n)\\nfrom cyclops.evaluate.metrics.experimental.functional.confusion_matrix import (\\n   binary_confusion_matrix,\\n)\\n\\n\\ny_true = np.random.randint(0, 2, size=10)\\ny_pred = np.random.rand(10)\\ntarget = torch.asarray(y_true)\\npreds = torch.asarray(y_pred)\\n\\nprint(\\"cyclops confusion matrix\\\\n\\", binary_confusion_matrix(y_true, y_pred_discrete))\\nprint(\\"torchmetrics confusion matrix\\\\n\\", torch_binary_confusion_matrix(y_true, y_pred_discrete))\\n```\\n\\nresults in\\n\\n```bash\\ncyclops confusion matrix\\n [[2 3]\\n [4 1]]\\ntorchmetrics confusion matrix\\n [[2 3]\\n [4 1]]\\n```\\n\\n### A simple and unified data package\\n\\nWe are introducing a simple and unified python package to process and create datasets for training, inference and evaluation. We use the popular \ud83e\udd17 [datasets](https://github.com/huggingface/datasets) library for efficiently slicing different modalities (tabular, time-series and images) of data to create subsets for evaluation and monitoring. The package has new methods, improved generalizability, and uses [Pandas 2.0](https://pandas.pydata.org/docs/dev/whatsnew/index.html#release).\\n\\nCheck out an example [tutorial](https://vectorinstitute.github.io/cyclops/api/tutorials/kaggle/heart_failure_prediction.html) that showcases the use of the `cyclops.data` API to create slices of data for evaluation!\\n\\n### Next steps\\n\\nWe believe that the model report will enable increased transparency around model development, and help with auditing of ML systems that are deployed in clinical settings. We are working with early adopter stakeholders on a few different use cases to pilot the model report. Stay tuned for updates and improvements as we learn more about how clinical ML teams use CyclOps!"}]}')}}]);