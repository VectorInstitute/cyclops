[project]
name = "pycyclops"
version = "0.2.12"
description = "Framework for healthcare ML implementation"
readme = "README.md"
authors = [{name = "Vector AI Engineering", email = "cyclops@vectorinstitute.ai"}]
license = "Apache-2.0"
repository = "https://github.com/VectorInstitute/cyclops"
requires-python = ">=3.9,<3.12"
dependencies = [
    "pandas>=2.1,<3.0; extra == 'performance'",
    "numpy>=1.24.0,<2.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    "scipy>=1.11.0,<2.0.0",
    "matplotlib>=3.8.3,<4.0.0",
    "datasets>=2.15.0,<3.0.0",
    "psutil>=5.9.4,<6.0.0",
    "pyarrow>=17.0.0,<18.0.0",
    "pydantic>=1.10.11,<2.0.0",
    "Jinja2>=3.1.3,<4.0.0",
    "spdx-tools>=0.8.1,<0.9.0",
    "pybtex>=0.24.0,<0.25.0",
    "kaleido==0.2.1",
    "scour>=0.38.2,<0.39.0",
    "plotly>=5.7.0,<6.0.0",
    "pillow>=10.0.0,<11.0.0",
    "array-api-compat==1.6",
    "hydra-core>=1.2.0,<2.0.0"
]

[project.optional-dependencies]
monai = ["torch>=1.11.0,<2.0.0", "monai>=1.3.0,<2.0.0; extra == 'itk'"]
torch = ["torch>=1.11.0,<2.0.0"]
torchvision = ["torchvision>=0.14.0,<0.15.0"]
torchxrayvision = ["torch>=1.11.0,<2.0.0", "torchxrayvision>=1.2.0,<2.0.0"]
xgboost = ["xgboost>=1.5.2,<2.0.0"]
alibi = ["llvmlite>=0.40.0,<0.41.0", "alibi>=0.9.4,<0.10.0; extra == 'shap'"]
alibi-detect = ["torch>=1.11.0,<2.0.0", "llvmlite>=0.40.0,<0.41.0", "alibi-detect>=0.12.0,<0.13.0; extra == 'torch'"]
all = [
    "torch>=1.11.0,<2.0.0",
    "torchvision>=0.14.0,<0.15.0",
    "torchxrayvision>=1.2.0,<2.0.0",
    "llvmlite>=0.40.0,<0.41.0",
    "monai>=1.3.0,<2.0.0; extra == 'itk'",
    "xgboost>=1.5.2,<2.0.0",
    "alibi>=0.9.4,<0.10.0; extra == 'shap'",
    "alibi-detect>=0.12.0,<0.13.0; extra == 'torch'"
]

[dependency-groups]
dev = [
    "pytest>=7.1.1,<8.0.0",
    "pre-commit>=4.0.0,<5.0.0",
    "pytest-cov>=3.0.0,<4.0.0",
    "codecov>=2.1.13,<3.0.0",
    "nbstripout>=0.6.1,<0.7.0",
    "mypy>=1.7.0,<2.0.0",
    "ruff>=0.4.0,<0.5.0",
    "nbqa>=1.7.0,<2.0.0; extra == 'toolchain'",
    "pip-audit>=2.7.1,<3.0.0",
    "cycquery>=0.1.2,<0.2.0",
    "torchmetrics>=1.2.0,<2.0.0; extra == 'classification'",
    "pytest-mpi>=0.6,<0.7",
    "pytest-xdist>=3.5.0,<4.0.0; extra == 'psutil'"
]

docs = [
    "numpydoc>=1.2,<2.0",
    "sphinx>=7.2.5,<8.0.0",
    "sphinxcontrib-apidoc>=0.4.0,<0.5.0",
    "sphinx-autodoc-typehints>=1.24.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0",
    "sphinx-design>=0.5.0,<0.6.0",
    "sphinx-copybutton>=0.5.0,<0.6.0",
    "sphinx-autoapi>=2.0.0,<3.0.0",
    "nbsphinx>=0.9.3,<0.10.0",
    "ipython>=8.8.0,<9.0.0",
    "ipykernel>=6.23.0,<7.0.0",
    "kaggle>=1.5.13,<2.0.0",
    "imbalanced-learn>=0.12.0,<0.13.0",
    "furo>=2024.01.29"
]

test = [
    "cycquery>=0.1.0,<0.2.0",
    "seaborn>=0.11.2,<0.12.0",
    "jupyter>=1.0.0,<2.0.0",
    "jupyterlab>=3.4.2,<4.0.0",
    "ipympl>=0.9.3,<0.10.0",
    "ipywidgets>=8.0.6,<9.0.0",
    "torchmetrics>=1.2.0,<2.0.0; extra == 'classification'",
    "cupy>=13.3.0,<14.0.0",
    "mpi4py @ git+https://github.com/mpi4py/mpi4py",
    "imbalanced-learn>=0.12.0,<0.13.0",
    "pyperf>=2.6.3,<3.0.0"
]

deploy_models = [
    "aiohttp>=3.9.2,<4.0.0",
    "bentoml>=1.2.5,<2.0.0; extra == 'triton'",
    "torchxrayvision>=1.2.1,<2.0.0",
    "kaggle>=1.5.13,<2.0.0",
    "onnx>=1.15.0,<2.0.0",
    "skl2onnx>=1.16.0,<2.0.0"
]

deploy_report = [
    "fastapi>=0.111.0,<0.112.0",
    "uvicorn>=0.30.1,<0.31.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["cyclops"]

[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_subclassing_any = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "E501", # line too long
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Replace magic number with named constant
    "PLR0913", # Too many arguments
    "COM812", # Missing trailing comma
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.pytest.ini_options]
markers = [
    "integration_test: marks tests as integration tests",
]

[tool.coverage]
    [tool.coverage.run]
    source=["cyclops"]
    omit=["tests/*", "*__init__.py"]
