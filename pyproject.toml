[tool.poetry]
name = "pycyclops"
version = "0.2.2"
description = "Framework for healthcare ML implementation"
authors = ["Vector AI Engineering <cyclops@vectorinstitute.ai>"]
license = "Apache-2.0"
repository = "https://github.com/VectorInstitute/cyclops"
documentation = "https://vectorinstitute.github.io/cyclops/"
packages = [
    { include = "cyclops" },
]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9, <3.11"
pandas = "^2.0"
numpy = "^1.24.0"
scikit-learn = "^1.2.2"
scipy = "^1.11.0"
datasets = "^2.15.0"
psutil = "^5.9.4"
pyarrow = "^14.0.0"
pydantic = "^1.10.11"
Jinja2 = "^3.1.2"
spdx-tools = "^0.8.1"
pybtex = "^0.24.0"
kaleido = "0.2.1"
scour = "^0.38.2"
plotly = "^5.7.0"
pillow = "^9.5.0"
array-api-compat = "^1.4"
hydra-core = "^1.2.0"

# Optional dependencies
monai = { version = "^1.3.0", extras = ["itk"], optional = true }
torch = { version = "^1.11.0", optional = true }
torchvision = { version = "^0.14.0", optional = true }
torchxrayvision = { version = "^1.2.0", optional = true }
xgboost = { version = "^1.5.2", optional = true }
alibi = { version = "^0.9.4", optional = true, extras = ["shap"] }
alibi-detect = { version = "^0.11.0", optional = true, extras = ["torch"] }
llvmlite = { version = "^0.40.0", optional = true }

[tool.poetry.group.xgboost]
optional = true

[tool.poetry.group.xgboost.dependencies]
xgboost = "^1.5.2"

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
torch = "^1.11.0"

[tool.poetry.group.torchvision]
optional = true

[tool.poetry.group.torchvision.dependencies]
torchvision = "^0.14.0"

[tool.poetry.group.torchxrayvision]
optional = true

[tool.poetry.group.torchxrayvision.dependencies]
torch = "^1.11.0"
torchxrayvision = "^1.2.0"

[tool.poetry.group.monai]
optional = true

[tool.poetry.group.monai.dependencies]
torch = "^1.11.0"
monai = "^1.1.0"

[tool.poetry.group.alibi]
optional = true

[tool.poetry.group.alibi.dependencies]
llvmlite = "^0.40.0"
alibi = "^0.9.4"

[tool.poetry.group.alibi-detect]
optional = true

[tool.poetry.group.alibi-detect.dependencies]
llvmlite = "^0.40.0"
torch = "^1.11.0"
alibi-detect = { version = "^0.11.0", extras = ["torch"] }

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.1"
pre-commit = "^2.17.0"
black = "^22.1.0"
pytest-cov = "^3.0.0"
codecov = "^2.1.13"
nbstripout = "^0.6.1"
mypy = "^1.7.0"
ruff = "^0.1.0"
nbqa = { version = "^1.7.0", extras = ["toolchain"] }
cycquery = "^0.1.2" # used for integration test
torchmetrics = {version = "^1.2.0", extras = ["classification"]}

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
numpydoc = "^1.2"
sphinx = "^7.2.5"
sphinx-rtd-theme = "^2.0.0rc2"
sphinxcontrib-apidoc = "^0.4.0"
sphinx-autodoc-typehints = "^1.24.0"
myst-parser = "^2.0.0"
sphinx-copybutton = "^0.5.0"
sphinx-autoapi = "^2.0.0"
nbsphinx = "^0.8.11"
ipython = "^8.8.0"
ipykernel = "^6.23.0"
kaggle = "^1.5.13"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
cycquery = "^0.1.0"
seaborn = "^0.11.2"
matplotlib = "^3.5.1"
jupyter = "^1.0.0"
jupyterlab = "^3.4.2"
ipympl = "^0.9.3"
ipywidgets = "^8.0.6"
torchmetrics = {version = "^1.2.0", extras = ["classification"]}
cupy = "^12.2.0"
mpi4py = {git = "https://github.com/mpi4py/mpi4py"}
lightning = "^2.1.0"
imbalanced-learn = "^0.11.0"

[tool.poetry.extras]
torch = ["torch"]
torchvision = ["torchvision"]
torchxrayvision = ["torch", "torchxrayvision"]
monai = ["torch", "monai"]
xgboost = ["xgboost"]
alibi = ["llvmlite", "alibi"]
alibi-detect = ["torch", "llvmlite", "alibi-detect"]
all = ["torch", "torchvision", "torchxrayvision", "llvmlite", "monai", "xgboost", "alibi", "alibi-detect"]

[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_subclassing_any = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
line-length = 88
exclude = [
    "use_cases",
    "nbs",
]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "E501", # line too long
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Replace magic number with named constant
    "PLR0913", # Too many arguments
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]

[tool.ruff.pep8-naming]
ignore-names = ["X*", "setUp"]

[tool.ruff.isort]
lines-after-imports = 2

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.pytest.ini_options]
markers = [
    "integration_test: marks tests as integration tests",
]

[tool.coverage]
    [tool.coverage.run]
    source=["cyclops"]
    omit=["tests/*", "*__init__.py"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
