<!DOCTYPE html>

{# Get indices of all metric cards for 'overall' slice #}
{% set overall_indices = [] %}
{% for metric_card in model_card.overview.metric_cards.collection%}
  {% if metric_card.slice == 'overall' %}
    {% set _ = overall_indices.append(loop.index-1) %}
  {% endif %}
{% endfor %}

{% macro render_if_exist_list(values) %}
<div>
  {% if values.__class__.__name__ == "User"%}
  <li>
    {% for name, value in values %}
      {% if value %}
          {{ value }}
      {% endif %}
    {% endfor %}
  </li>
  {% elif values.__class__.__name__ == "Citation"%}
  <li>
    {# {% for name, value in values %} #}
      {# {% if value %} #}
        {{ values.content | safe }}
      {# {% endif %} #}
    {# {% endfor %} #}
  </li>
  {% elif values.__class__.__name__ == "Graphic"%}
    {{ render_graphic(values) }}
  {% elif values.__class__.__name__ == "GraphicsCollection" %}
    {{ render_graphics(values.collection) }}
  {% else %}
    {% if (values is string) or (values|int != 0) or (values|float != 0) %}
    <li>
      {{ values }}
    </li>
    {% else %}
    <li>
      {% for name, value in values %}
        {% if value %}
          {% if value.__class__.__name__ == "GraphicsCollection" %}
            {{ render_graphics(value.collection) }}
          {% elif (name == "description")%}
            {{ value }}
          {% elif (name == "link")%}
            <a href="{{ value }}">{{ value }}</a>
          {% else %}
            {% if "str" in name%}
              {{ value }}
            {% else %}
              <b>{{ name|regex_replace('_+', ' ')|title }}:</b> {{ value }}
            {% endif %}
          {% endif %}
          <br>
        {% endif %}
      {% endfor %}
    </li>
    {% endif %}
  {% endif %}
</div>
{% endmacro %}

{% macro render_metric_table(comp) %}
  <table class="styled-table">
    <tr><th>Metric</th><th>Slice</th><th>Current Value</th><th>Threshold</th><th>Previous Value</th></tr>
    {% for mp, mb in comp.new_metrics_failed_periodic|zip(comp.new_metrics_failed_baseline) %}
    {% if mp.value != 0 %}
      <tr>
        <td style="padding: 5px; text-align: center;">{{ mp.type }}</td>
        <td style="padding: 5px; text-align: center;">{{ mp.slice }}</td>
          <td style="padding: 5px; text-align: center;" id="{{ mp.type }}/{{ mp.slice }}">{{ mp.value|round(2) }}</td>
        {% if mp.tests|length != 0 %}
          <td style="padding: 5px; text-align: center;">{{ mp.tests[0].threshold|round(2) }}</td>
          <td style="padding: 5px; text-align: center;">{{mb.value|round(2)}}</td>
        {% else %}
          <td style="padding: 5px; text-align: center;">-</td>
          <td style="padding: 5px; text-align: center;">-</td>
        {% endif %}
      </tr>
    {% endif %}
    {% endfor %}
  </table>
{% endmacro %}

{% macro render_test_table(tests, passing, title) %}
{% if passing %}
  <table class="styled-table-pass" style="border: 3px solid green; ">
    <tr><th style="background-color: green;">{{title}}</th></tr>
    {% for test in tests %}
      {% if test.passed %}
        <tr>
          <td style="padding: 5px; text-align: center;"><a href="#{{ test.name }}">{{ test.name }}</a></td>
        </tr>
      {% endif %}
    {% endfor %}
  </table>
{% else %}
<table class="styled-table-fail" style="border: 3px solid red;">
  <tr><th style="background-color: red;">{{title}}</th></tr>
  {% for test in tests %}
    {% if not test.passed %}
      <tr>
        <td style="padding: 5px; text-align: center;"><a href="#{{ test.name }}">{{ test.name }}</a></td>
      </tr>
    {% endif %}
  {% endfor %}
{% endif %}
</table>
{% endmacro %}

{% macro render_graphic(graphic, class="img-item") %}
<div class="{{ class }}">
  {% if graphic.image.startswith('<div') %}
    {{ graphic.image|safe }}
  {% else %}
    {% if 'data' in graphic.image %}
      <img src='{{ graphic.image }}' alt='{{ graphic.name }}' />
    {% else %}
      <img src='data:image/png;base64,{{ graphic.image }}' alt='{{ graphic.name }}' />
    {% endif %}
  {% endif %}
</div>
{% endmacro %}

{% macro render_graphics(graphics) %}
<div>
  {% if graphics.description %}<p>{{ graphics.description }}</p>{% endif %}
  {% for graph in graphics %}
    {{ render_graphic(graph) }}
  {% endfor %}
</div>
{% endmacro %}

{% macro render_metric_card(card, idx, class)%}
<div class="{{class}}">
  <div>
   <span style="font-size: 18px; font-weight:bold;">
      <div class="tooltip">
      {{ card.name|regex_replace('(?<!^)(?=[A-Z][a-z])', ' ') }}
        <div class="tooltiptext">
          {{ card.tooltip }}
        <div class="arrow-up"></div>
        </div>
      </div>
    </span>
    <div display: inline-block;>
      {% if card.passed %}
        <span style="font-size: 48px; font-weight:bolder; color: green">{{ card.value|round(2) }}</span>
      {% elif not card.passed %}
        <span style="font-size: 48px; font-weight:bolder; color: red">{{ card.value|round(2) }}</span>
      {% else %}
        <span style="font-size: 48px; font-weight:bolder; color: gray">{{ card.value|round(2) }}</span>
      {% endif %}
      <span style="display: inline-block; margin-left: 60px; margin-top: 60px;">
        {% if card.passed %}
          <span style="font-size: 40px; color: green;">&#9650;</span>
        {% elif not card.passed %}
          <span style="font-size: 40px; color: red;">&#9660;</span>
        {% else %}
          <span style="font-size: 40px; color: gray;">&#9472;</span>
        {% endif %}
      </span>
      <span style="display: inline-block; line-height:1; margin-bottom: 10px;">
        <span style="font-size: 14px;">{{card.threshold}}<br>minimum<br>threshold</span>
      </span>
      <div id="model-card-plot-{{idx}}">
      </div>
    </div>
  </div>
</div>
{% endmacro %}

{% macro render_perf(name, comp)%}
<div class="card" id={{name}}>
<h3 style="color: black; font-weight:normal;">How is your model doing?</h3><br>
<h3 style="color: gray;  font-weight:normal;">A quick glance of your most important metrics.</h3>
{% for metric_card in comp.metric_cards.collection%}
  {% if metric_card.slice == 'overall' %}
    {{ render_metric_card(metric_card, loop.index-1, "subcard_overview") }}
  {% endif %}
{% endfor %}
</div>
{% endmacro %}

{% macro render_perf_over_time(name, comp)%}
<div class="card" id={{name}} style="display: block;">
  <h3 style="color: black; font-weight:normal;">How is your model doing over time?</h3><br>
  <h3 style="color: gray;  font-weight:normal;">See how your model is performing over several metrics and subgroups over time.</h3>
  <div style="display: flex; align-items: center; justify-content: center; padding: 10px; margin-bottom: 20px;">
    <h4 style="padding-right: 10px;">Multi-plot Selection:</h4>
    <div class="radio-buttons" id="plot-selection">
      <input type="radio" id="Plot 1" name="plot" value="Plot 1" checked>
      <label for="Plot 1">Plot 1</label>
      <input type="radio" id="+" name="plot" value="+">
      <label for="+" style="padding: 2.5px; font-weight:bold; font-size: 18px;">+</label>
    </div>
  </div>
  <div class="column" style="float: left;">
    <div class="subcard_overview" style="padding:10px; margin-bottom:20px; width:15vw;">
      <h4>Metrics</h4>
      <div class="radio-buttons" id="slice-selection">
          <input type="radio" id="{{comp.metric_cards.metrics[0]}}" name="metric" value="{{comp.metric_cards.metrics[0]}}" checked>
          {% if comp.metric_cards.metrics[0]|regex_search("\((.*?)\)")|length != 0 %}
            {% set acronym = comp.metric_cards.metrics[0]|regex_search("\((.*?)\)") %}
            <div class="tooltip">
              <label for="{{comp.metric_cards.metrics[0]}}">{{acronym[0]}}</label>
              <div class="tooltiptext">
                {{ comp.metric_cards.tooltips[0] }}
                <div class="arrow-up"></div>
              </div>
            </div>
          {% else %}
            <div class="tooltip">
              <label for="{{comp.metric_cards.metrics[0]}}">{{comp.metric_cards.metrics[0]|regex_replace('(?<!^)(?=[A-Z][a-z])', ' ')}}</label>
              <div class="tooltiptext">
                {{ comp.metric_cards.tooltips[0] }}
                <div class="arrow-up"></div>
              </div>
            </div>
          {% endif %}
        {% for metric, tooltip in comp.metric_cards.metrics[1:]|zip(comp.metric_cards.tooltips[1:]) %}
          <input type="radio" id="{{metric}}" name="metric" value="{{metric}}">
          {# when creating label look for "()" and display acronym inside brackets instead of full name #}
          {% if metric|regex_search("\((.*?)\)")|length != 0 %}
            {% set acronym = metric|regex_search("\((.*?)\)") %}
            <div class="tooltip">
              <label for="{{metric}}">{{acronym[0]}}</label>
              <div class="tooltiptext">
                {{ tooltip }}
                <div class="arrow-up"></div>
              </div>
            </div>
          {% else %}
            <div class="tooltip">
              <label for="{{metric}}">{{metric|regex_replace('(?<!^)(?=[A-Z][a-z])', ' ')}}</label>
              <div class="tooltiptext">
                {{ tooltip }}
                <div class="arrow-up"></div>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
    {% for slice, values in comp.metric_cards.slices|zip(comp.metric_cards.values) %}
      <div class="subcard_overview" style="padding:10px; margin-bottom:10px; width:15vw;">
        <h4>{{slice|regex_replace('(?<!^)(?=[A-Z][a-z])', ' ')}}</h4>
        <div class="radio-buttons" id="slice-selection">
          <input type="radio" id="overall_{{slice}}" name="{{slice}}" value="overall_{{slice}}" checked>
          <label for="overall_{{slice}}">All</label>
          {% for value in values %}
            <input type="radio" id="{{value}}" name="{{slice}}" value="{{value}}">
            {% if value|regex_search("\((.*?)\)")|length != 0 %}
              {% set acronym = value|regex_search("\((.*?)\)") %}
              <label for="{{value}}">{{acronym[0]}}</label>
            {% else %}
              <label for="{{value}}">{{value|regex_replace('(?<!^)(?=[A-Z][a-z])', ' ')}}</label>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    {% endfor %}
  </div>
  <div class="subcard_overview" style="margin: 0px; margin-left:25px; float:left; min-width:500px; max-width:100%;">
    <div id="plot"></div>
  </div>
</div>
{% endmacro %}

{% macro render_overview(name, comp) %}
{{ render_perf(name, comp) }}
{# {% set val = {'history': false} %}
{% for metric_card in comp.metric_cards.collection%}
    {% if metric_card.history|length > 1 %}
      {% set _ = val.update({'history':true}) %}
    {% endif %}
{% endfor %}
{% if val['history'] %} #}
{{ render_perf_over_time(name, comp) }}
{# {% endif %} #}
{% endmacro %}

{% macro render_objects(section)%}
{% for name, object in section %}
  {% if name == "performance_metrics" %} {# do nothing #}
  {% elif object.__class__.__name__ == "GraphicsCollection"%}
    <div class="subcard" style="flex-basis:100%;">
      <h3>{{ name|regex_replace('_+', ' ')|title}}</h3>
      <ul>
        {{render_if_exist_list(object)}}
      </ul>
    </div>
  {% else %}
    {% if (object is list) and object|length != 0 %}
    <div class="subcard">
      <h3>{{ name|regex_replace('_+', ' ')|title}}</h3>
      {% for objects in object%}
          <ul>
          {{ render_if_exist_list(objects) }}
          </ul>
      {% endfor %}
    </div>
    {% elif ( (object is string) or (object is int) or (object is float) or (object is bool) ) %}
    <div class="subcard">
      <h3>{{ name|title|regex_replace('(?<!^)(?=[A-Z])', ' ') }}</h3>
      {{ object }}
    </div>
    {% elif (object is None) or (object is empty) %}
    {% else %}
    <div class="subcard">
      <h3>{{ name|regex_replace('_+', ' ')|title}}</h3>
      <ul>
      {{render_if_exist_list(object)}}
      </ul>
    </div>
    {% endif %}
  {% endif %}
{% endfor %}
{% endmacro %}

{% macro render_section(name, section)%}
{% if section is not empty%}
  {% set header = section.__class__.__name__ %}
    <div class="card" id={{name}}>
    <h2 class="collapsible">{{ header|regex_replace('(?<!^)(?=[A-Z])', ' ') }}</h2> {# print title of section #}
    <hr class="collapsible-bar">
    {% if header == "Datasets" %}
      {% for dataset in section.data %}
          {{ render_objects(dataset) }}
      {% endfor %}
      {# Display global plots from GraphicsCollection in Datasets, temporary fix #}
      {% if section is hasattr "graphics" %}
        <div class="subcard" style="flex-basis:100%;">
          <h3>{{ "Graphics" }}</h3>
          {{ render_if_exist_list(section.graphics) }}
        </div>
      {% endif %}
    {% elif header == "QuantitativeAnalysis"%}
      {% for metric_card in model_card.overview.metric_cards.collection %}
        {% if metric_card.slice == 'overall' %}
          {{ render_metric_card(metric_card, loop.index-1, "subcard") }}
        {% endif %}
      {% endfor %}
      {% if section is hasattr "graphics"%}
        {% if section.graphics is not none%}
          <div class="subcard" style="flex-basis:100%;">
            <h3>{{ "Graphics" }}</h3>
            {{ render_if_exist_list(section.graphics) }}
          </div>
        {% endif %}
      {% endif %}
    {% else %}
      {{ render_objects(section) }}
    {% endif %}
  </div>
{% endif %}
{% endmacro %}

{% macro render_sidebar(model_card) %}
<input class=minimizer type='checkbox' id='sidebar-toggle' />
<label for="sidebar-toggle" id='sidebar-btn'>
  <div id='sidebar_toggle_icon'>
    <svg width="24px" height="24px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 4C4.34315 4 3 5.34315 3 7V17C3 18.6569 4.34315 20 6 20H18C19.6569 20 21 18.6569 21 17V7C21 5.34315 19.6569 4 18 4H6ZM5 7C5 6.44772 5.44772 6 6 6H9V18H6C5.44772 18 5 17.5523 5 17V7ZM11 18H18C18.5523 18 19 17.5523 19 17V7C19 6.44772 18.5523 6 18 6H11V18Z" fill="#000000"/>
    </svg>
  </div>
</label>
<div id='sidebar'>
  <div id="model_info_card">
    <div id="model_info">
        <h4 style="margin: 0.5rem;">{{ model_card.model_details.name }}</h4>
        <h6 style="margin: 0.5rem;">Model Monitoring Report</h6>
        <br>
        <h6 style="margin: 0.5rem;">Model Developed By: {{ model_card.model_details.owners[0].name }}</h6>
        <h6 style="margin: 0.5rem;">Contact: {{ model_card.model_details.owners[0].contact }}</h6>
        <h6 style="margin: 0.5rem;">Email: {{ model_card.model_details.owners[0].email }}</h6>
    </div>
  </div>
  <hr>
  <ul id='contents'>
    {% for name, section in model_card %}
      {% if section is not empty %}
        <a href="#{{ name }}">
          <li class="button" id="{{name}}_button">{{ section.__class__.__name__|regex_replace('(?<!^)(?=[A-Z])', ' ') }}</li>
        </a>
      {% endif %}
    {% endfor %}
  </ul>
</div>
{% endmacro %}

<html lang="en">
  <head>
    {# <meta id="slices" data-slices="{{ get_slices(model_card)|safe }}" /> #}
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial_scale=1">
    {# <link href="css/bootstrap.min.css" rel="stylesheet"> #}
    {# <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"> #}
    {# <script src="js/bootstrap.bundle.min.js"></script> #}
    {# <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script> #}
    <style>
      html {
        scroll-behavior: smooth;
      }

      body {
        font-family: Arial, Helvetica, sans-serif;
        min-width: 1150px;
      }

      h2 {
        color: #214d87;
        flex-basis: 100%;
      }

      h3 {
        color: #0073e4;
        flex-basis: 100%;
      }
      .card {
        display: flex;
        flex-wrap: wrap;
        flex-basis: 100%;
        justify-content: left;
        padding: 1em;
        border: 1px solid #DADCE0;
        margin: 10px;
        background-color: #ffffff;
        border-radius: 5px;
      }

      .subcard {
        padding: 30px;
        border: 1px solid #DADCE0;
        margin: 10px;
        background-color: #f3f4f6;
        border-radius: 5px;
        box-shadow: 4px 4px 4px 0px rgba(0, 0, 0, 0.1);
      }

      .subcard_overview {
        padding: 30px;
        border: 1px solid #DADCE0;
        margin: 10px;
        background-color: #f3f4f6;
        border-radius: 5px;
        box-shadow: 4px 4px 4px 0px rgba(0, 0, 0, 0.1);
      }

      ul li {
        width: 100%;
        float:left;
      }

      .img-item {
        flex-basis: 100%;
        margin-top: 10px;
        margin-bottom: 10px;
      }

      #banner {
        width: 100%;
        height: 170px;
        position: relative;
        z-index: 0;
        top: 0;
        left: 0;
      }

      #banner #logo {
        float: left;
        max-width: 500px;
        width: auto;
        height: auto;
      }

      #logo {
        margin-top: 50px;
        padding-bottom: 10px;
        float: left;
        max-width: 200px;
        width: auto;
        height: auto;
      }

      #sidebar {
        background-color: #ffffff;
        height: 100%;
        width: 15rem;
        position: fixed;
        z-index: 1;
        top: 0;
        left: 0;
        display: block;
        box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.2);
        transition: left 0.2s ease-in-out;
      }

      #sidebar-btn:hover {
        background-color: rgba(247, 247, 248, 0.9);
        border-radius: 5px;
        cursor: pointer;
      }

      #sidebar-toggle {
        display: none;
      }

      #sidebar-btn {
        position: fixed;
        top: 10px;
        left: 190px;
        z-index: 2;
        border: none;
        padding: 0.25rem 0.5rem;
        background-color: #ffffff;
        transition: left 0.2s ease-in-out;
        outline: 2px solid #0000001a;
        border-radius: 5px;
      }

      #sidebar-toggle:checked+#sidebar-btn+#sidebar {
        left: -16rem;
      }

      #sidebar-toggle:checked+#sidebar-btn+#sidebar>hr {
        margin: 0.5em 0.5em 0.5em 12.5em;
      }

      hr {
        border: 0.75px solid;
        color: #e5e7eb;
        opacity: 0.7;
        margin: 0.5em 0.5em 0.5em 0.5em;
        transition: margin 0.2s ease-in-out;
      }

      #sidebar-toggle:checked+#sidebar-btn {
        left: 10px;
      }

      #sidebar-toggle:checked~#container {
        margin-left: 50px;
      }

      #sidebar .title {
        display: block;
        font-size: .75rem;
        line-height: 1rem;
        font-weight: 900;
        padding: 3.0rem 1rem 0rem 1rem
      }

      #sidebar #contents {
        list-style: none;
        padding: 0;
        margin: 0;
        margin-left: 10px;
        margin-right: 40px;
      }

      #sidebar #contents .button:hover {
        background-color: rgba(0, 115, 228, 0.3);
        cursor: pointer;
      }

      .active {
        background-color: rgba(0, 115, 228, 0.3);
        cursor: pointer;
      }

      #sidebar .button {
        display: block;
        font-size: .75rem;
        line-height: 0.5rem;
        font-weight: 500;
        font-size: 15px;
        padding: 1rem 1rem 1rem 1rem;
        text-decoration: none;
        color: #000000;
      }

      #sidebar #button_min {
        display: none;
        float: right;
        font-size: .75rem;
        line-height: 0.5rem;
        font-weight: 500;
        font-size: 15px;
        margin-top: -2.5rem;
        padding: 1rem 1rem 1rem 1.3rem;
        text-decoration: none;
        color: #000000;
      }

      #sidebar #button_min:hover {
        background-color: rgba(0, 0, 0, 0.3);
        border-radius: 5px;
        cursor: pointer;
      }

      #container {
        max-width: 100%;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        margin-left: 250px;
        margin-right: 25px;
        transition: margin-left 0.2s ease-in-out;
      }

      #model_info_card {
        width: 100%;
        background-color: #0073e4;
        text-align: left;
        color: white;
        display: inline-block;
      }

      #model_info {
        padding-top: 2.5rem;
        padding-left: 1rem;
      }

      body {
        background-color: #f3f4f6;
      }

      .styled-table {
        border-spacing: 0;
        border-collapse: separate;
        border-radius: 10px;
        border: 3px solid #0073e4;
        margin: 25px;
        font-size: 16px;
        font-family: Arial, Helvetica, sans-serif;
        min-width: 200px;
        box-shadow: 6px 6px 6px 0px rgba(0, 0, 0, 0.2);
      }

      .styled-table-pass {
        border-spacing: 0;
        border-collapse: separate;
        border-radius: 10px;
        border: 3px solid green;
        font-size: 16px;
        font-family: Arial, Helvetica, sans-serif;
        min-width: 200px;
        box-shadow: 6px 6px 6px 0px rgba(0, 0, 0, 0.2);
      }

      .styled-table-fail {
        border-spacing: 0;
        border-collapse: separate;
        border-radius: 10px;
        border: 3px solid red;
        font-size: 16px;
        font-family: Arial, Helvetica, sans-serif;
        min-width: 200px;
        box-shadow: 6px 6px 6px 0px rgba(0, 0, 0, 0.2);
      }

      th {
        padding: 12px 15px;
        color: white;
        background-color: #0073e4;
      }

      tbody tr {
        border-bottom: 1px solid #dddddd;
      }

      tr:nth-of-type(even) {
        background-color: #ffffff;
      }

      caption {
        font-weight: bold;
      }

      .tooltip {
        position: relative;
        display: inline-block;
      }

      .tooltip .tooltiptext {
        visibility: hidden;
        width: 120px;
        background-color: black;
        color: #fff;
        text-align: center;
        padding: 5px;
        font-size: 12px;
        font-weight:lighter;
        position: absolute;
        z-index: 1;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.2s;
      }

      .tooltip .tooltiptext .arrow-up {
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-bottom: 10px solid black;
        position: absolute;
        bottom: -10px;
        left: 45%;
        transform: translateX(-50%);
        transform: scaleY(-1);
      }

      .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
      }

      .tooltip:hover {
        color:#0073e4;
      }

      .radio-buttons {
        display: flex;
        row-gap: 15px;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: left;
        align-items: center;
      }

      input[type="radio"] {
        display: none;
      }

      .radio-buttons label {
        font-size:14px;
        cursor: pointer;
        padding: 5px 20px;
        margin: 0px;
        margin-top: 2px;
        margin-bottom: 2px;
        color: black;
        text-align: center;
        transition: background-color 0.3s ease;
        background-color: #ffffff;
        border: 2px solid #DADCE0;
        white-space: nowrap;
      }

      .radio-buttons label:not(:first-child):not(:last-child) {
        border-top: 2px solid #DADCE0;
        border-bottom: 2px solid #DADCE0;
        border-left: 1px solid #DADCE0;
        border-right: 1px solid #DADCE0;
      }

      .radio-buttons .tooltip label:not(:first-child):not(:last-child) {
        border-top: 2px solid #DADCE0;
        border-bottom: 2px solid #DADCE0;
        border-left: 1px solid #DADCE0;
        border-right: 1px solid #DADCE0;
      }

      .radio-buttons label:last-child {
        border-left: 1px solid #DADCE0;
      }

      .radio-buttons .tooltip label:first-child {
        border-right: 1px solid #DADCE0;
      }

      .radio-buttons label:hover {
        color: #0073e4;
      }

      .radio-buttons .tooltip label:hover {
        color: #0073e4;
      }

      .radio-buttons input[type="radio"]:checked+label {
        background-color: rgba(0, 115, 228, 0.2);
        border: 2px solid #0073e4;
        color: #0073e4;
      }

      .radio-buttons input[type="radio"]:checked + .tooltip label {
        background-color: rgba(0, 115, 228, 0.2);
        border: 2px solid #0073e4;
        color: #0073e4;
      }


      .radio-buttons #button {
        padding-right: 5px;
        margin-left: 5px;
        margin-right: 0px;
        font-size:18px;
        font-weight: bold;
        cursor: pointer;
        color: black;
        background-color: #ffffff;
        border: 2px solid #DADCE0;
      }

      .radio-buttons #button:hover {
        color: #0073e4;
      }

      .collapsible::before {
        content: "▶";
        margin-right: 1%;
      }

      .collapsible.down-arrow::before {
        content: "▼";
      }

      .collapsible.right-arrow::before {
        content: "▶";
      }

      .collapsible {
        cursor: pointer;
      }

      .collapsible-bar {
        width: 100%;
        color: #214d87;
        display: none;
      }

    </style>
    <script>{{ plotlyjs|safe }}</script>
  </head>
  <body>
    {{ render_sidebar(model_card) }}
    <main id="container">
      {% for name, section in model_card %}
        {% if name == "overview" %}
          {{ render_overview(name, section) }}
        {% else %}
          {{ render_section(name, section) }}
        {% endif %}
      {% endfor %}
    </main>
  </body>
</html>
<script>
  function multipleStringLines(title) {
      if (title.length > 50) { // check if greater than threshold!
                  let y_axis = title.split(' ');    //break into words
                  let interval = title.split(' ').length / 2;     //2-lines
                  return y_axis.slice(0, interval).join(' ') + '<br>' + y_axis.slice(interval, y_axis.length).join(' ');
      }
      return title;
  }

  function isInView(element) {
    // return true if element is in view
    var rect     = element.getBoundingClientRect(),
        vWidth   = window.innerWidth || document.documentElement.clientWidth,
        vHeight  = window.innerHeight || document.documentElement.clientHeight,
        efp      = function (x, y) { return document.elementFromPoint(x, y) };

    // Return false if it's not in the viewport
    if (rect.right < 0 || rect.bottom < 0
            || rect.left > vWidth || rect.top > vHeight - 2*vHeight/3)  {
        return false;
            }
    else {
      return true;
    }
  }
  function setActiveButton() {
    const buttons = document.querySelectorAll('#contents li');
    const sections = document.querySelectorAll('.card');

    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      if (isInView(section)) {
        // find button from buttons with same id as section with "_button" appended
        for (let j = 0; j < buttons.length; j++) {
          const button = buttons[j];
          if (button.id == section.id + "_button") {
            button.classList.add("active");
          }
          else {
            button.classList.remove("active");
          }
        }
      }
    }
  }
  document.addEventListener('scroll', setActiveButton);
  setActiveButton();

  function generate_model_card_plot() {
    var model_card_plots = []
    var overall_indices = {{overall_indices}}
    var histories = JSON.parse({{ get_histories(model_card)|safe|tojson }});
    var thresholds = JSON.parse({{ get_thresholds(model_card)|safe|tojson }});
    var timestamps = JSON.parse({{ get_timestamps(model_card)|safe|tojson }});

    for (let i = 0; i < overall_indices.length; i++) {
      var idx = overall_indices[i];
      var model_card_plot = "model-card-plot-" + idx;
      var threshold = thresholds[idx];
      var history_data = [];
      for (let i = 0; i < histories[idx].length; i++) {
        history_data.push(parseFloat(histories[idx][i]));
      }
      var timestamp_data = [];
      for (let i = 0; i < timestamps[idx].length; i++) {
        timestamp_data.push(timestamps[idx][i]);
      }

      var model_card_fig = {
        data: [
          {
            x: timestamp_data,
            y: history_data,
            mode: "lines+markers",
            marker: { color: "rgb(31,111,235)" },
            line: { color: "rgb(31,111,235)" },
            showlegend: false,
            type: "scatter",
            name: ""
          },
          {
            x: timestamp_data,
            y: Array(history_data.length).fill(threshold),
            mode: "lines",
            line: { color: "black", dash: "dot" },
            showlegend: false,
            type: "scatter",
            name: ""
          }
        ],
        layout: {
          paper_bgcolor: "rgba(0,0,0,0)",
          plot_bgcolor: "rgba(0,0,0,0)",
          xaxis: {
            zeroline: false,
            showticklabels: true,
            showgrid: false,
            tickformat: '%b\n %Y'
          },
          yaxis: {
            gridcolor: "#ffffff",
            zeroline: false,
            showticklabels: true,
            showgrid: true,
            range: [-0.10, 1.10],
          },
          margin: { l: 30, r: 0, t: 0, b: 30 },
          padding: { l: 0, r: 0, t: 0, b: 0 },
          height: 150,
          width: 300
        }
      };
      if (history.length > 0) {
        Plotly.newPlot(model_card_plot, model_card_fig.data, model_card_fig.layout, {displayModeBar: false});
      }
    }
  }
  generate_model_card_plot();

  const plot = document.getElementById('plot');
  const inputs_all = document.querySelectorAll('#slice-selection input[type="radio"]');
  const plot_selection = document.querySelectorAll('#plot-selection input[type="radio"]');
  var selections = [null, null, null, null, null, null, null, null, null, null, null];
  var plot_colors = [
    "rgb(0, 115, 228)",
    "rgb(31, 119, 180)",
    "rgb(255, 127, 14)",
    "rgb(44, 160, 44)",
    "rgb(214, 39, 40)",
    "rgb(148, 103, 189)",
    "rgb(140, 86, 75)",
    "rgb(227, 119, 194)",
    "rgb(127, 127, 127)",
    "rgb(188, 189, 34)",
    "rgb(23, 190, 207)"
  ];

  function deletePlotSelection(plot_number) {
    var plot_selection = document.querySelectorAll('#plot-selection input[type="radio"]');
    var label_selection = document.querySelectorAll('#plot-selection label');
    var label_slice_selection = document.querySelectorAll('#slice-selection label');
    var button_plot_selection = document.querySelectorAll('#plot-selection button');

    // set last plot to checked
    // get plot_selection with name "Plot N" where N is plot_number
    for (let i = 0; i < plot_selection.length; i++) {
      var plot_name = "Plot " + (plot_number+1)
      if (plot_selection[i].value === plot_name) {
        plot_number = i;
      }
    }
    plot_selection[plot_number].checked = false;
    plot_selection[plot_number-1].checked = true;

    // delete plot_selected and label
    plot_selection[plot_number].remove();
    label_selection[plot_number].remove();

    selections[plot_number] = null;

    // set selection to last plot
    selection = selections[plot_number-1];
    plot_color = plot_colors[plot_number-1];

    // set current plot selection color to plot_color
    const [r, g, b] = plot_color.match(/\d+/g);
    const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
    plot_selection[plot_number-1].style.backgroundColor = rgbaColor;
    plot_selection[plot_number-1].style.border = "2px solid " + plot_color;
    plot_selection[plot_number-1].style.color = plot_color;

    // make visibility of delete button from last plot visible
    if (button_plot_selection.length >= 2) {
      button_plot_selection[button_plot_selection.length-2].style.visibility = "visible";
    }

    for (let i = 0; i < selection.length; i++) {
      // use selection to set label_slice_selection background color
      for (let j = 0; j < inputs_all.length; j++) {
        if (inputs_all[j].name === selection[i].split(":")[0]) {
          if (inputs_all[j].value == selection[i].split(":")[1]) {
            inputs_all[j].checked = true;
            label_slice_selection[j].style.backgroundColor = rgbaColor;
            label_slice_selection[j].style.border = "2px solid " + plot_color;
            label_slice_selection[j].style.color = plot_color;
          }
        }
      }
    }
    updatePlot();
  }

  function updatePlotSelection() {
    const inputs = document.querySelectorAll('#slice-selection input[type="radio"]:checked');
    var plot_selection = document.querySelectorAll('#plot-selection input[type="radio"]');
    var plot_selected = document.querySelectorAll('#plot-selection input[type="radio"]:checked')[0];
    // get number from value in plot_selected "Plot 1" -> 1
    var plot_number = parseInt(plot_selected.value.split(" ")[1]);
    var label_selection = document.querySelectorAll('#plot-selection label');
    var label_slice_selection = document.querySelectorAll('#slice-selection label');
    var button_plot_selection = document.querySelectorAll('#plot-selection button');

    // if plot_selected is "+" then add new radio button to plot_selection called "Plot N" where last plot is N-1 but keep "+" at end and set new radio button to checked for second last element
    if (plot_selected.value === "+") {
      // if 10 plots already exist, don't add new plot and gray out "+"
      if (plot_selection.length === 11) {
        plot_selected.checked = false;
        label_selection[label_selection.length-1].style.color = "gray";
        return;
      }
      // plot_name should be name of last plot + 1
      if (plot_selection.length === 2) {
        var plot_name = "Plot 2"
      } else {
        var plot_name = "Plot " + (parseInt(plot_selection[plot_selection.length - 2].value.split(" ")[1]) + 1);
      }
      var new_plot = document.createElement("input");
      new_plot.type = "radio";
      new_plot.id = plot_name;
      new_plot.name = "plot";
      new_plot.value = plot_name;
      new_plot.checked = true;
      var new_label = document.createElement("label");
      new_label.htmlFor = plot_name;
      new_label.innerHTML = plot_name;

      // Parse plot_color to get r, g, b values
      var plot_color = plot_colors[plot_selection.length]
      const [r, g, b] = plot_color.match(/\d+/g);
      const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
      // set background color of new radio button to plot_color
      new_label.style.backgroundColor = rgbaColor;
      new_label.style.border = "2px solid " + plot_color;
      new_label.style.color = plot_color;

      // add button to delete plot
      var delete_button = document.createElement("button");
      delete_button.id = "button";
      delete_button.innerHTML = "&times";
      delete_button.style.backgroundColor = "transparent";
      delete_button.style.border = "none";
      new_label.style.padding = "1.5px 0px";
      new_label.style.paddingLeft = "10px";

      new_label.appendChild(delete_button)

      // make delete button from last plot invisible if not Plot 1
      if (plot_selection.length > 2) {
        button_plot_selection[button_plot_selection.length-1].style.visibility = "hidden";
      }
      // add on_click event to delete button and send plot number to deletePlotSelection
      delete_button.onclick = function() {deletePlotSelection(plot_number)};

      // insert new radio button and label before "+" radio button and after last radio button
      plot_selected.insertAdjacentElement("beforebegin", new_plot);
      plot_selected.insertAdjacentElement("beforebegin", new_label);

      // Add event listener to new radio button
      new_plot.addEventListener('change', updatePlotSelection);

      // set plot_selected to new plot
      var plot_selected = new_plot

      for (let i = 0; i < label_selection.length-1; i++) {
        plot_selection[i].checked = false;
        label_selection[i].style.backgroundColor = "#ffffff";
        label_selection[i].style.border = "2px solid #DADCE0";
        label_selection[i].style.color = "#000000";
        }

      selections[parseInt(plot_selected.value.split(" ")[1]-1)] = selections[parseInt(plot_selected.value.split(" ")[1]-2)]
      selection = selections[parseInt(plot_selected.value.split(" ")[1]-1)];
      plot_color = plot_colors[parseInt(plot_selected.value.split(" ")[1])];

      for (let i = 0; i < selection.length; i++) {
        // use selection to set label_slice_selection background color
        for (let j = 0; j < inputs_all.length; j++) {
          if (inputs_all[j].name === selection[i].split(":")[0]) {
            if (inputs_all[j].value == selection[i].split(":")[1]) {
              const [r, g, b] = plot_color.match(/\d+/g);
              const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
              inputs_all[j].checked = true;
              label_slice_selection[j].style.backgroundColor = rgbaColor;
              label_slice_selection[j].style.border = "2px solid " + plot_color;
              label_slice_selection[j].style.color = plot_color;
            }
            else {
              inputs_all[j].checked = false;
              label_slice_selection[j].style.backgroundColor = "#ffffff";
              label_slice_selection[j].style.border = "2px solid #DADCE0";
              label_slice_selection[j].style.color = "#000000";
            }
          }
        }
      }
    } else {
      for (let i = 0; i < plot_selection.length-1; i++) {
        if (plot_selection[i].value !== plot_selected.value) {
          plot_selection[i].checked = false;
          label_selection[i].style.backgroundColor = "#ffffff";
          label_selection[i].style.border = "2px solid #DADCE0";
          label_selection[i].style.color = "#000000";
        }
        else {
          var plot_color = plot_colors[i+1]
          const [r, g, b] = plot_color.match(/\d+/g);
          const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
          plot_selected.checked = true;
          label_selection[i].style.backgroundColor = rgbaColor;
          label_selection[i].style.border = "2px solid " + plot_color;
          label_selection[i].style.color = plot_color;
        }
      }
      selection = selections[parseInt(plot_selected.value.split(" ")[1]-1)];
      plot_color = plot_colors[parseInt(plot_selected.value.split(" ")[1])];
      for (let i = 0; i < selection.length; i++) {
        // use selection to set label_slice_selection background color
        for (let j = 0; j < inputs_all.length; j++) {
          if (inputs_all[j].name === selection[i].split(":")[0]) {
            if (inputs_all[j].value == selection[i].split(":")[1]) {
              inputs_all[j].checked = true;
              const [r, g, b] = plot_color.match(/\d+/g);
              const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
              label_slice_selection[j].style.backgroundColor = rgbaColor;
              label_slice_selection[j].style.border = "2px solid " + plot_color;
              label_slice_selection[j].style.color = plot_color;
            }
            else {
              inputs_all[j].checked = false;
              label_slice_selection[j].style.backgroundColor = "#ffffff";
              label_slice_selection[j].style.border = "2px solid #DADCE0";
              label_slice_selection[j].style.color = "#000000";
            }
          }
        }
      }
    }
    var slices_all = JSON.parse({{ get_slices(model_card)|safe|tojson }});
    var histories_all = JSON.parse({{ get_histories(model_card)|safe|tojson }});
    var thresholds_all = JSON.parse({{ get_thresholds(model_card)|safe|tojson }});
    var trends_all = JSON.parse({{ get_trends(model_card)|safe|tojson }});
    var passed_all = JSON.parse({{ get_passed(model_card)|safe|tojson }});
    var names_all = JSON.parse({{ get_names(model_card)|safe|tojson }});
    var timestamps_all = JSON.parse({{ get_timestamps(model_card)|safe|tojson }});

    var radioGroups = {};
    var labelGroups = {};
    for (let i = 0; i < inputs_all.length; i++) {
      var input = inputs_all[i];
      var label = label_slice_selection[i];
      var groupName = input.name;
      if (!radioGroups[groupName]) {
        radioGroups[groupName] = [];
        labelGroups[groupName] = [];
      }
      radioGroups[groupName].push(input);
      labelGroups[groupName].push(label);
    }

    // use radioGroups to loop through selection changing only one element at a time
    for (let i = 0; i < selection.length; i++) {
      for (let j = 0; j < inputs_all.length; j++) {
        if (inputs_all[j].name === selection[i].split(":")[0]) {
          radio_group = radioGroups[selection[i].split(":")[0]];
          label_group = labelGroups[selection[i].split(":")[0]];
          for (let k = 0; k < radio_group.length; k++) {
            selection_copy = selection.slice();
            selection_copy[i] = selection[i].split(":")[0] + ":" + radio_group[k].value;
            // get idx of slices where all elements match
            var idx = Object.keys(slices_all).find(key => JSON.stringify(slices_all[key].sort()) === JSON.stringify(selection_copy.sort()));
            if (idx === undefined) {
              // set radio button to disabled and cursor to not allowed and color to gray if idx is undefined
              radio_group[k].disabled = true;
              label_group[k].style.cursor = "not-allowed";
              label_group[k].style.color = "gray";
              label_group[k].style.backgroundColor = "rgba(125, 125, 125, 0.2)";
            }
            else {
              radio_group[k].disabled = false;
              label_group[k].style.cursor = "pointer";
            }
          }
        }
      }
    }

    traces = [];
    var plot_number = parseInt(plot_selected.value.split(" ")[1]-1);
    for (let i = 0; i < selections.length; i++) {
      if (selections[i] === null) {
        continue;
      }
      selection = selections[i]

      // get idx of slices where all elements match
      var idx = Object.keys(slices_all).find(key => JSON.stringify(slices_all[key].sort()) === JSON.stringify(selection));
      var history_data = [];
      for (let i = 0; i < histories_all[idx].length; i++) {
        history_data.push(parseFloat(histories_all[idx][i]));
      }
      var timestamp_data = [];
      for (let i = 0; i < timestamps_all[idx].length; i++) {
        timestamp_data.push(timestamps_all[idx][i]);
      }
      threshold = parseFloat(thresholds_all[idx]);
      trend = trends_all[idx];
      passed = passed_all[idx];
      name = names_all[idx];

      // if trend is "positive" set keyword to upwards, if trend is "negative" set keyword to downwards, else set keyword to flat
      if (trend === "positive") {
        var trend_keyword = "upwards";
      } else if (trend === "negative") {
        var trend_keyword = "downwards";
      } else {
        var trend_keyword = "flat";
      }

      // if passed is true set keyword to Above, if passed is false set keyword to Below
      if (passed) {
        var passed_keyword = "above";
      }
      else {
        var passed_keyword = "below";
      }

      // create title for plot: Current {metric name} is trending {trend_keyword} and is {passed_keyword} the threshold.
      // get number of nulls in selections, if 9 then plot title, else don't plot title
      var nulls = 0;
      for (let i = 0; i < selections.length; i++) {
        if (selections[i] === null) {
          nulls += 1;
        }
      }
      if (nulls === 10) {
        var plot_title = "Current " + name + " is trending " + trend_keyword + " and is " + passed_keyword + " the threshold.";
        var plot_title = multipleStringLines(plot_title);
        var showlegend = false;
      }
      else {
        var plot_title = "";
        var showlegend = true;
      }
      name = ""
      suffix = " ( "
      for (let i = 0; i < selection.length; i++) {
        if (selection[i].split(":")[0] === "metric") {
          name += selection[i].split(":")[1];
        }
        else {
          if (selection[i].split(":")[1].includes("overall")) {
            continue;
          } else {
            suffix += selection[i];
            suffix += ", ";
          }
        }
      }
      if (suffix === " ( ") {
        name += "";
      }
      else {
        suffix = suffix.slice(0, -2);
        name += suffix + " )";
      }

      var trace = {
        // range of x is the length of the list of floats
        x: timestamp_data,
        y: history_data,
        mode: 'lines+markers',
        type: 'scatter',
        marker: {color: plot_colors[i+1]},
        line: {color: plot_colors[i+1]},
        name: name,
      };
      traces.push(trace);
    }

    if (nulls === 10) {
      var threshold_trace = {
        x: timestamp_data,
        y: Array.from({length: history_data.length}, (_, i) => threshold),
        mode: 'lines',
        type: 'scatter',
        marker: {color: 'rgb(0,0,0)'},
        line: {color: 'rgb(0,0,0)', dash: 'dot'},
        name: '',
      };
      traces.push(threshold_trace);
    }
    var width = Math.max(parent.innerWidth - 900, 500);
    var layout = {
      title: {
        text: plot_title,
        font: {
          family:  'Arial, Helvetica, sans-serif',
          size: 18,
        }
      },
      paper_bgcolor: 'rgba(0,0,0,0)',
      plot_bgcolor: 'rgba(0,0,0,0)',
      xaxis: {
        zeroline: false,
        showticklabels: true,
        showgrid: false,
        tickformat: '%b\n %Y'
      },
      yaxis: {
        gridcolor: '#ffffff',
        zeroline: false,
        showticklabels: true,
        showgrid: true,
        range: [-0.10, 1.10],
      },
      showlegend: showlegend,
      // show legend at top
      legend: {
        orientation: "h",
        yanchor: "top",
        y: 1.1,
        xanchor: "left",
        x: 0.1
      },
      margin: {
        l: 50,
        r: 50,
        b: 50,
        t: 50,
        pad: 4
      },
      // set height and width of plot to extra-wide to fit the plot
      height: 500,
      // get size of window and set width of plot to size of window
      width: width,
    }
    Plotly.newPlot(plot, traces, layout, {displayModeBar: false});
  }



  // Define a function to update the plot based on selected filters
  function updatePlot() {
    const inputs = document.querySelectorAll('#slice-selection input[type="radio"]:checked');
    var plot_selection = document.querySelectorAll('#plot-selection input[type="radio"]');
    var plot_selected = document.querySelectorAll('#plot-selection input[type="radio"]:checked')[0];
    // get number from value in plot_selected "Plot 1" -> 1
    var label_selection = document.querySelectorAll('#plot-selection label');
    var label_slice_selection = document.querySelectorAll('#slice-selection label');

    // get all inputs values from div class radio-buttons
    // get name of inputs
    var inputs_name = [];
    var inputs_value = [];
    for (let i = 0; i < inputs.length; i++) {
      inputs_name.push(inputs[i].name);
      inputs_value.push(inputs[i].value);
    }

    var plot_number = parseInt(plot_selected.value.split(" ")[1]-1);
    var selection = [];
    for (let i = 0; i < inputs_value.length; i++) {
      selection.push(inputs_name[i] + ":" + inputs_value[i]);
    }
    selection.sort();
    selections[plot_number] = selection;

    // if plot_selected is "+" then add new radio button to plot_selection called "Plot N" where last plot is N-1 but keep "+" at end and set new radio button to checked for second last element
    if (plot_selected.value === "+") {
      // if 10 plots already exist, don't add new plot and gray out "+"
      if (plot_selection.length === 13) {
        plot_selected.checked = false;
        label_selection[-1].style.color = "gray";
        return;
      }
      var new_plot = document.createElement("input");
      new_plot.type = "radio";
      new_plot.id = "Plot " + (plot_selection.length);
      new_plot.name = "plot";
      new_plot.value = "Plot " + (plot_selection.length);
      new_plot.checked = true;
      var new_label = document.createElement("label");
      new_label.htmlFor = "Plot " + (plot_selection.length);
      new_label.innerHTML = "Plot " + (plot_selection.length);

      // Parse plot_color to get r, g, b values
      var plot_color = plot_colors[plot_selection.length]
      const [r, g, b] = plot_color.match(/\d+/g);
      const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
      // set background color of new radio button to plot_color
      new_label.style.backgroundColor = rgbaColor;
      new_label.style.border = "2px solid " + plot_color;
      new_label.style.color = plot_color;

      // insert new radio button and label before "+" radio button and after last radio button
      plot_selected.insertAdjacentElement("beforebegin", new_plot);
      plot_selected.insertAdjacentElement("beforebegin", new_label);
      // Add event listener to new radio button
      new_plot.addEventListener('change', updatePlot);

      // set plot_selected to new plot
      plot_selected = new_plot

      for (let i = 0; i < label_selection.length-1; i++) {
        plot_selection[i].checked = false;
        label_selection[i].style.backgroundColor = "#ffffff";
        label_selection[i].style.border = "2px solid #DADCE0";
        label_selection[i].style.color = "#000000";
        }
    } else {
      for (let i = 0; i < plot_selection.length-1; i++) {
        if (plot_selection[i].value !== plot_selected.value) {
          plot_selection[i].checked = false;
          label_selection[i].style.backgroundColor = "#ffffff";
          label_selection[i].style.border = "2px solid #DADCE0";
          label_selection[i].style.color = "#000000";
        }
        else {
          var plot_color = plot_colors[i+1]
          const [r, g, b] = plot_color.match(/\d+/g);
          const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
          plot_selected.checked = true;
          label_selection[i].style.backgroundColor = rgbaColor;
          label_selection[i].style.border = "2px solid " + plot_color;
          label_selection[i].style.color = plot_color;
        }
      }
    }
    var slices_all = JSON.parse({{ get_slices(model_card)|safe|tojson }});
    var histories_all = JSON.parse({{ get_histories(model_card)|safe|tojson }});
    var thresholds_all = JSON.parse({{ get_thresholds(model_card)|safe|tojson }});
    var trends_all = JSON.parse({{ get_trends(model_card)|safe|tojson }});
    var passed_all = JSON.parse({{ get_passed(model_card)|safe|tojson }});
    var names_all = JSON.parse({{ get_names(model_card)|safe|tojson }});
    var timestamps_all = JSON.parse({{ get_timestamps(model_card)|safe|tojson }});

    for (let i = 0; i < selection.length; i++) {
      // use selection to set label_slice_selection background color
      for (let j = 0; j < inputs_all.length; j++) {
        if (inputs_all[j].name === selection[i].split(":")[0]) {
          if (inputs_all[j].value == selection[i].split(":")[1]) {
            inputs_all[j].checked = true;
            const [r, g, b] = plot_color.match(/\d+/g);
            const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.2)`;
            label_slice_selection[j].style.backgroundColor = rgbaColor;
            label_slice_selection[j].style.border = "2px solid " + plot_color;
            label_slice_selection[j].style.color = plot_color;
          }
          else {
            inputs_all[j].checked = false;
            label_slice_selection[j].style.backgroundColor = "#ffffff";
            label_slice_selection[j].style.border = "2px solid #DADCE0";
            label_slice_selection[j].style.color = "#000000";
          }
        }
      }
    }

    var radioGroups = {};
    var labelGroups = {};
    for (let i = 0; i < inputs_all.length; i++) {
      var input = inputs_all[i];
      var label = label_slice_selection[i];
      var groupName = input.name;
      if (!radioGroups[groupName]) {
        radioGroups[groupName] = [];
        labelGroups[groupName] = [];
      }
      radioGroups[groupName].push(input);
      labelGroups[groupName].push(label);
    }

    // use radioGroups to loop through selection changing only one element at a time
    for (let i = 0; i < selection.length; i++) {
      for (let j = 0; j < inputs_all.length; j++) {
        if (inputs_all[j].name === selection[i].split(":")[0]) {
          radio_group = radioGroups[selection[i].split(":")[0]];
          label_group = labelGroups[selection[i].split(":")[0]];
          for (let k = 0; k < radio_group.length; k++) {
            selection_copy = selection.slice();
            selection_copy[i] = selection[i].split(":")[0] + ":" + radio_group[k].value;
            // get idx of slices where all elements match
            var idx = Object.keys(slices_all).find(key => JSON.stringify(slices_all[key].sort()) === JSON.stringify(selection_copy.sort()));
            if (idx === undefined) {
              // set radio button to disabled and cursor to not allowed and color to gray if idx is undefined
              radio_group[k].disabled = true;
              label_group[k].style.cursor = "not-allowed";
              label_group[k].style.color = "gray";
              label_group[k].style.backgroundColor = "rgba(125, 125, 125, 0.2)";
            }
            else {
              radio_group[k].disabled = false;
              label_group[k].style.cursor = "pointer";
            }
          }
        }
      }
    }

    traces = [];
    for (let i = 0; i < selections.length; i++) {
      if (selections[i] === null) {
        continue;
      }
      selection = selections[i]
      // get idx of slices where all elements match
      var idx = Object.keys(slices_all).find(key => JSON.stringify(slices_all[key].sort()) === JSON.stringify(selection));
      var history_data = [];
      for (let i = 0; i < histories_all[idx].length; i++) {
        history_data.push(parseFloat(histories_all[idx][i]));
      }
      var timestamp_data = [];
      for (let i = 0; i < timestamps_all[idx].length; i++) {
        timestamp_data.push(timestamps_all[idx][i]);
      }
      threshold = parseFloat(thresholds_all[idx]);
      trend = trends_all[idx];
      passed = passed_all[idx];
      name = names_all[idx];

      // if trend is "positive" set keyword to upwards, if trend is "negative" set keyword to downwards, else set keyword to flat
      if (trend === "positive") {
        var trend_keyword = "upwards";
      } else if (trend === "negative") {
        var trend_keyword = "downwards";
      } else {
        var trend_keyword = "flat";
      }

      // if passed is true set keyword to Above, if passed is false set keyword to Below
      if (passed) {
        var passed_keyword = "above";
      }
      else {
        var passed_keyword = "below";
      }

      // create title for plot: Current {metric name} is trending {trend_keyword} and is {passed_keyword} the threshold.
      // get number of nulls in selections, if 9 then plot title, else don't plot title
      var nulls = 0;
      for (let i = 0; i < selections.length; i++) {
        if (selections[i] === null) {
          nulls += 1;
        }
      }
      if (nulls === 10) {
        var plot_title = "Current " + name + " is trending " + trend_keyword + " and is " + passed_keyword + " the threshold.";
        var plot_title = multipleStringLines(plot_title);
        var showlegend = false;
      }
      else {
        var plot_title = "";
        var showlegend = true;
      }
      name = ""
      suffix = " ( "
      for (let i = 0; i < selection.length; i++) {
        if (selection[i].split(":")[0] === "metric") {
          name += selection[i].split(":")[1];
        }
        else {
          if (selection[i].split(":")[1].includes("overall")) {
            continue;
          } else {
            suffix += selection[i];
            suffix += ", ";
          }
        }
      }
      if (suffix === " ( ") {
        name += "";
      }
      else {
        suffix = suffix.slice(0, -2);
        name += suffix + " )";
      }
      var trace = {
        // range of x is the length of the list of floats
        x: timestamp_data,
        y: history_data,
        mode: 'lines+markers',
        type: 'scatter',
        marker: {color: plot_colors[i+1]},
        line: {color: plot_colors[i+1]},
        name: name,
        //name: selection.toString(),
      };
      traces.push(trace);
    }

    if (nulls === 10) {
      var threshold_trace = {
        x: timestamp_data,
        y: Array.from({length: history_data.length}, (_, i) => threshold),
        mode: 'lines',
        type: 'scatter',
        marker: {color: 'rgb(0,0,0)'},
        line: {color: 'rgb(0,0,0)', dash: 'dot'},
        name: '',
      };
      traces.push(threshold_trace);
    }
    var width = Math.max(parent.innerWidth - 900, 500);
    var layout = {
      title: {
        text: plot_title,
        font: {
          family:  'Arial, Helvetica, sans-serif',
          size: 18,
        }
      },
      paper_bgcolor: 'rgba(0,0,0,0)',
      plot_bgcolor: 'rgba(0,0,0,0)',
      xaxis: {
        zeroline: false,
        showticklabels: true,
        showgrid: false,
        tickformat: '%b\n %Y'
      },
      yaxis: {
        gridcolor: '#ffffff',
        zeroline: false,
        showticklabels: true,
        showgrid: true,
        range: [-0.10, 1.10],
      },
      showlegend: showlegend,
      // show legend at top
      legend: {
        orientation: "h",
        yanchor: "top",
        y: 1.1,
        xanchor: "left",
        x: 0.1
      },
      margin: {
        l: 50,
        r: 50,
        b: 50,
        t: 50,
        pad: 4
      },
      // set height and width of plot to width of card minus 500px
      height: 500,
      width: width,
    }
    Plotly.newPlot(plot, traces, layout, {displayModeBar: false});
  }
  // Add event listeners to radio buttons
  for (let input of inputs_all) {
    input.addEventListener('change', updatePlot);
  }
  // Add event listener to update plot when window is resized
  window.addEventListener('resize', updatePlot);
  for (let selection of plot_selection) {
    selection.addEventListener('change', updatePlotSelection);
  }
  // Initial update when the page loads
  updatePlot();

  function setCollapseButton() {
    const collapsible = document.getElementsByClassName("collapsible");

    const subcards = document.getElementsByClassName("subcard");
    // set subcards to display: none for all subcards
    for (let j = 0; j < subcards.length; j++) {
      subcards[j].style.display = 'none';
    }

    for (let i = 0; i < collapsible.length; i++) {
      collapsible[i].addEventListener("click", function() {
        let arrow = collapsible[i];
        if (arrow.classList.contains('down-arrow')) {
          arrow.classList.add('right-arrow');
          arrow.classList.remove('down-arrow');
        } else {
          arrow.classList.add('down-arrow');
          arrow.classList.remove('right-arrow');
        }

        let card = this.closest('.card');
        let subcards = card.getElementsByClassName('subcard');

        for (let j = 0; j < subcards.length; j++) {
          subcards[j].style.display = subcards[j].style.display === 'block' ? 'none' : 'block';
        }

        let collapsible_bar = card.getElementsByClassName("collapsible-bar")[0];
        collapsible_bar.style.display = collapsible_bar.style.display === 'block' ? 'none' : 'block';
        refreshPlotlyPlots();
      });
    }
  }
  document.addEventListener('DOMContentLoaded', setCollapseButton);

  // function to refresh plotly plots
  function refreshPlotlyPlots() {
    const img_items = document.getElementsByClassName("img-item");
    for (let i = 0; i < img_items.length; i++) {
      if (img_items[i].getElementsByTagName("div").length > 0) {
        id = img_items[i].getElementsByClassName("plotly-graph-div")[0].id;
        var gd = document.getElementById(id);
        data = gd.data;
        layout = gd.layout;
        Plotly.update(id, data, layout);
      }
    }
  }

</script>
