<!DOCTYPE html>

{% import "macros.jinja" as macros %}

{# Get indices of all metric cards for 'overall' slice #}
{% set overall_indices = [] %}
{% for metric_card in model_card.overview.metric_cards.collection%}
  {% if metric_card.slice == 'overall' %}
    {% set _ = overall_indices.append(loop.index-1) %}
  {% endif %}
{% endfor %}


<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>{{ model_card.model_details.name }} - Model Report</title>
  
  <!-- Material Dashboard 2 CSS -->
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900|Roboto+Slab:400,700" />
  <link id="pagestyle" href="/assets/css/material-dashboard.css?v=3.0.0" rel="stylesheet" />
  
  <!-- Plotly JS -->
  <script>{{ plotlyjs|safe }}</script>
  {% block css%}
    <style>
      {% include "assets/css/material-dashboard.css" %}
      {% include "assets/css/nucleo-icons.css" %}
      {% include "assets/css/nucleo-svg.css" %}
      {% include "assets/css/nucleo-svg.css" %}
      {% include "assets/css/custom.css" %}
    </style>
  {% endblock %}

  {% block javascript %}
    <script type="text/javascript">
        {% include "assets/js/core/popper.min.js" %}
        {% include "assets/js/core/bootstrap.min.js" %}
        {% include "assets/js/plugins/chartjs.min.js" %}
        {% include "assets/js/plugins/Chart.extension.js" %}
        {% include "assets/js/material-dashboard.min.js" %}
    </script>
{% endblock %}
</head>

<body class="g-sidenav-show bg-white-200">
  
  {{ macros.render_sidebar(model_card) }}
  
  <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg">
    <!-- Navbar -->
    <nav class="navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl" id="navbarBlur" navbar-scroll="true">
      <div class="container-fluid py-1 px-3">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
            <li class="breadcrumb-item text-sm"><a class="opacity-5 text-dark" href="javascript:;">Pages</a></li>
            <li class="breadcrumb-item text-sm text-dark active" aria-current="page">Model Report</li>
          </ol>
          <h6 class="font-weight-bolder mb-0">{{ model_card.model_details.name }}</h6>
        </nav>
      </div>
    </nav>
    <!-- End Navbar -->
    
    {% for name, section in model_card %}
      {% if name == "overview" %}
        {{ macros.render_overview(name, section) }}
      {% else %}
        {{ macros.render_section(model_card, name, section) }}
      {% endif %}
    {% endfor %}
  </main>
  <!-- Custom JS -->
  <script type="text/javascript">
    {% include "plot.js" %}
    {% include "button.js" %}
  </script>
  
  <script>
    // Initialize Material Dashboard 2 scripts
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

<script>
  function multipleStringLines(title) {
      if (title.length > 50) { // check if greater than threshold!
                  let y_axis = title.split(' ');    //break into words
                  let interval = title.split(' ').length / 2;     //2-lines
                  return y_axis.slice(0, interval).join(' ') + '<br>' + y_axis.slice(interval, y_axis.length).join(' ');
      }
      return title;
  }

  function isInView(element) {
    // return true if element is in view
    var rect     = element.getBoundingClientRect(),
        vWidth   = window.innerWidth || document.documentElement.clientWidth,
        vHeight  = window.innerHeight || document.documentElement.clientHeight,
        efp      = function (x, y) { return document.elementFromPoint(x, y) };

    // Return false if it's not in the viewport
    if (rect.right < 0 || rect.bottom < 0
            || rect.left > vWidth || rect.top > vHeight - 2*vHeight/3)  {
        return false;
            }
    else {
      return true;
    }
  }
  document.addEventListener('scroll', setActiveButton);
  setActiveButton();
  generate_model_card_plot();

  const plot = document.getElementById('plot');
  const inputs_all = document.querySelectorAll('#slice-selection input[type="radio"]');
  const plot_selection = document.querySelectorAll('#plot-selection input[type="radio"]');
  var selections = [null, null, null, null, null, null, null, null, null, null, null];
  var plot_colors = [
    "rgb(0, 115, 228)",
    "rgb(31, 119, 180)",
    "rgb(255, 127, 14)",
    "rgb(44, 160, 44)",
    "rgb(214, 39, 40)",
    "rgb(148, 103, 189)",
    "rgb(140, 86, 75)",
    "rgb(227, 119, 194)",
    "rgb(127, 127, 127)",
    "rgb(188, 189, 34)",
    "rgb(23, 190, 207)"
  ];

  // create global variable for max_n_evals
  var histories = JSON.parse({{ get_histories(model_card)|safe|tojson }});
  // get max_n_evals from histories
  var history_data = [];
  for (let i = 0; i < histories[0].length; i++) {
  history_data.push(parseFloat(histories[0][i]));
  }
  var max_n_evals = history_data.length;

// Add event listeners to radio buttons
  for (let input of inputs_all) {
  input.addEventListener('change', updatePlot);
  }
  // Add event listener to update plot when window is resized
  window.addEventListener('resize', updatePlot);
  for (let selection of plot_selection) {
  selection.addEventListener('change', updatePlotSelection);
  }


  // Initial update when the page loads
  updatePlot();
  document.addEventListener('DOMContentLoaded', setCollapseButton);

  function updateLastNEvals() {
  var n_evals_slider_p = document.getElementById("n_evals_slider_p");
  var slider_p_num = document.getElementById("slider_p_num");
  var n_evals_slider_pot = document.getElementById("n_evals_slider_pot");
  var slider_pot_num = document.getElementById("slider_pot_num");

  n_evals_slider_p.max = max_n_evals;
  n_evals_slider_pot.max = max_n_evals;

  var last_n_evals = {{ model_card.overview.last_n_evals }};

  if (last_n_evals == 0) {
      n_evals_slider_p.value = max_n_evals;
      slider_p_num.innerHTML = n_evals_slider_p.value;
      n_evals_slider_pot.value = max_n_evals;
      slider_pot_num.innerHTML = n_evals_slider_pot.value;
  }
  generate_model_card_plot();
  updatePlot();

  if (n_evals_slider_p !== null) {
      n_evals_slider_p.oninput = function() {
          slider_p_num.innerHTML = this.value;
          generate_model_card_plot();
      }
  }
  if (n_evals_slider_pot !== null) {
      n_evals_slider_pot.oninput = function() {
          slider_pot_num.innerHTML = this.value;
          updatePlot();
          }
      }
  }
  document.addEventListener('DOMContentLoaded', updateLastNEvals);

function storeMeanStdMinEvals() {
  var mean_radio_button = document.getElementById("mean");
  var mean_std_min_evals = {{ model_card.overview.mean_std_min_evals }};
  mean_radio_button.value = mean_std_min_evals;
}
document.addEventListener('DOMContentLoaded', storeMeanStdMinEvals);


function changeMeanStd() {
  updatePlot();
}

var mean_std_plot_selection = document.querySelectorAll('#mean-std-selection input[type="checkbox"]');
for (let selection of mean_std_plot_selection) {
  selection.addEventListener('change', changeMeanStd);
}

var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
  return new bootstrap.Tooltip(tooltipTriggerEl)
})



</script>
</body>
</html>